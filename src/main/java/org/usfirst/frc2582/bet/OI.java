// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2582.bet;

import org.usfirst.frc2582.bet.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc2582.bet.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joy;                    //initializes the joystick
    public Joystick gamepad;                //initializes the gamepad

    public JoystickButton button1;          //buttons from 1 - 10 for gamepad
    public JoystickButton button2;          //buttons snap and manFoot for joystick
    public JoystickButton button3;          //initialize to button
    public JoystickButton button4;
    public JoystickButton button5;
    public JoystickButton button6;
    public JoystickButton button7;
    public JoystickButton button8;
    public JoystickButton button9;
    public JoystickButton button10;
    public JoystickButton snap;
    public JoystickButton manFoot;
    public JoystickButton ledSwitch;



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        gamepad = new Joystick(1);          //declares gamepad at port 1 in ds
        

        joy = new Joystick(0);              //declares joystick at port 0 in ds

        
        button1 = new JoystickButton(gamepad, 1);   //sets button1 to 'A'
        button1.whenPressed(new down());            //when pressed it does puts triangle down
        
        button2 = new JoystickButton(gamepad, 2);   //sets button2 to 'B'
        button2.whenPressed(new up());              //when pressed it does puts triangle up

        button3 = new JoystickButton(gamepad, 3);   //sets button3 to 'X'
        button3.whileHeld(new push());              //while held the piston is out

        button4 = new JoystickButton(gamepad, 4);   //sets button4 to 'Y'
        button4.whenPressed(new AutoShoot());       //when pressed it does auto shoot
    
        button5 = new JoystickButton(gamepad, 5);   //sets button5 to 'LB'
        button5.whileHeld(new intake());            //while held box does intake

        button6 = new JoystickButton(gamepad, 6);   //sets button6 to 'RB'
        button6.whileHeld(new outtake());           //while held the box does outtake

        //lip buttons
        button7 = new JoystickButton(gamepad, 7);   //sets button7 to 'START'
        button7.whenPressed(new TongueInCommand()); //when pressed the tongue goes in

        button8 = new JoystickButton(gamepad, 8);   //sets button8 to 'RESET'
        button8.whenPressed(new TongueOutCommand());//when pressed the tongue goes out
        //button8.cancelWhenActive(new AutoBox());

        button9 = new JoystickButton(gamepad, 9);   //sets button9 to 'LEFT JOYSTICK'
        button9.whenPressed(new MotionMagicClimbCommand());//magic

        button10 = new JoystickButton(gamepad, 10); //sets button10 to 'RIGHT JOYSTICK'
        button10.whenPressed(new AutoBox());        //when pressed it does auto


        //joystic buttons
        snap = new JoystickButton(joy, 1);          //sets snap to trigger
        snap.whileHeld(new SnapAndLock());          //while held it does snapAndLock

        manFoot = new JoystickButton(joy, 7);       //sets manFoot to button7
        manFoot.whileHeld(new jump());              //while held it does jump

        //ledSwitch = new JoystickButton(joy, 2);       //sets ledSwitch to button7
        //ledSwitch.whenPressed(new ledSwitch());;      //when pressed it changes led light
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("joydrive", new joydrive());
        SmartDashboard.putData("intake", new intake());
        SmartDashboard.putData("outtake", new outtake());
        SmartDashboard.putData("jump", new jump());
        SmartDashboard.putData("push", new push());
        SmartDashboard.putData("up", new up());
        SmartDashboard.putData("down", new down());
        SmartDashboard.putData("auto", new AutoBox());
        //SmartDashboard.putData("zero foot", new ZeroFootCommand());
        //SmartDashboard.putData("motion magic jump", new MotionMagicClimbCommand());
        //SmartDashboard.putData("tongue out", new TongueOutCommand());
        //SmartDashboard.putData("tongue in", new TongueInCommand());
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getjoy() 
    {
        return joy;
    }

    public Joystick getgamepad() 
    {
        return gamepad;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

